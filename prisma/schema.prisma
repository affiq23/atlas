// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type             String
  provider         String
  providerAccountId String
  refresh_token    String? @db.Text
  access_token     String? @db.Text
  expires_at       Int?
  token_type       String?
  scope            String?
  id_token         String? @db.Text
  session_state    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  trips         Trip[]
  preferences   Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Trip {
  id            String    @id @default(cuid())
  title         String
  destination   String
  startDate     DateTime
  endDate       DateTime
  budget        Float?
  status        String    @default("draft")
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  days          Day[]
  shareToken    String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  coverImage    String?
}

model Day {
  id            String    @id @default(cuid())
  date          DateTime
  tripId        String
  trip          Trip      @relation(fields: [tripId], references: [id], onDelete: Cascade)
  activities    Activity[]
  notes         String?   @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Activity {
  id            String    @id @default(cuid())
  title         String
  description   String?   @db.Text
  location      Json      // { lat: number, lng: number, address: string }
  startTime     DateTime?
  endTime       DateTime?
  cost          Float?
  dayId         String
  day           Day       @relation(fields: [dayId], references: [id], onDelete: Cascade)
  category      String?
  bookingUrl    String?
  weather       Json?     // Cached weather data
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
